# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: cron

plugins:
  - serverless-domain-manager
  - serverless-plugin-cloudfront-lambda-edge

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  profile: serverless
  environment:
    BUCKET: '${self:custom.bucketName}'
    DYNAMODB_USERDATA_TABLE: '${self:service}-userdata'
    IDENTITY_POOL_NAME: '${self:service}'
    USER_POOL_NAME: '${self:service}'
  region: us-east-1
  accountId: 186123361267

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        "arn:aws:s3:::${self:custom.bucketName}"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        "arn:aws:s3:::${self:custom.bucketName}/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        "arn:aws:dynamodb:${self:provider.region}:${self:provider.accountId}:table/${self:provider.environment.DYNAMODB_USERDATA_TABLE}"
    - Effect: "Allow"
      Action:
        - "cognito-identity:*"
      Resource:
        # TODO: Better security scoping
        # This is a hassle because I don't think we can easily reference the resource using serverless
        # "arn:aws:cognito-sync:${self:provider.region}:${self:provider.accountId}:identitypool/${self:provider.identityPoolId}"
        "*"

custom:
  bucketName: '${self:service}-${self:provider.stage}-s3bucketdata'

  customDomain:
    domainName: serverless.whimsy.space
    basePath: ""
    certificateName: "*.serverless.whimsy.space"
    createRoute53Record: true
    endpointType: 'regional'

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  bucketEvent:
    handler: handler.bucketEvent
    events:
      - s3: data
  api:
    handler: handler.http
    events:
      - http:
          path: / # this matches the base path
          method: ANY
      - http:
          path: /{any+} # this matches any path, the token 'any' doesn't mean anything special
          method: ANY
  edge:
    handler: handler.edge
    lambdaAtEdge:
       distribution: SiteDistribution
       eventType: 'origin-request'
  cron:
    handler: handler.run  # This will require the handler.js file,
                          # and execute the exported run function
#    events:
#      - schedule: rate(1 minute)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here

resources:
  Resources:
    S3BucketData:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:custom.bucketName}'
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - Content-*
                - origin
              AllowedMethods:
                - GET
                - HEAD
                - POST
              AllowedOrigins:
                - '*'
              MaxAge: 86400
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html

    BucketEventLambdaPermissionDataS3:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - BucketEventLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:custom.bucketName}"

    # CloudFront Distribution
    # =======================
    # Using Lambda@Edge with CloudFront you can set up a function to run
    # upon every request to any path on any subdomain.
    #
    # Allowed Methods
    # ---------------
    # We want to be able to respond to all methods in our lambda so we list them
    # all here.
    #
    # Cookies
    # -------
    # I'm currently whitelisting one cookie for experimental session tracking
    # across all subdomains, the goal being to know who is logged in and to
    # provide some kind of basic groups/permissions for users as the interact
    # with apps and data.
    #
    # Ex. Person A builds a game, Person B visits Person A's game, since the
    # subdomain shares a cookie domain, and that cookie is HttpOnly, then our
    # system can know who is logged in and who's app they are interacting with.
    # We can then allow that user to interact with that app at the appropriate
    # level of permissions.
    #
    # We can set up CORS and block subdomains from making arbitrary requests on
    # behalf of the logged in user, while allowing requests that are scoped to
    # that subdomain.
    #
    # S3 Origin
    # ---------
    # The origin is really kind of a dummy origin since every origin request will go
    # throug the lambda function. It can't be a real S3 Origin, instead it has to be
    # the S3 Bucket's website origin, otherwise we can't forward the Host header and
    # the subdomain splitting becomes useless.
    #
    # Viewer Certificate
    # ------------------
    # Currently no way to auto-create and manage the certificate through CloudFormation/Serverless
    # so we create it manually and pass in the ARN.
    #
    # QueryString
    # -----------
    # Need to set to true ortherwise the querystring value given to the lambda will always be empty.
    # Fine if you one doesn't want to use querystrings, but I do.
    SiteDistribution:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Aliases:
            - "*.serverless.whimsy.space"
            - serverless.whimsy.space
          Comment: "*.serverless.whimsy.space"
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            DefaultTTL: '10'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: true
              Headers:
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
                - Origin
                - Host
              Cookies:
                Forward: whitelist
                WhitelistedNames:
                  - _sesh
          DefaultRootObject: 'index.html'
          Enabled: true
          HttpVersion: 'http2'
          PriceClass: PriceClass_200
          ViewerCertificate:
            SslSupportMethod: sni-only
            AcmCertificateArn: >-
              arn:aws:acm:us-east-1:186123361267:certificate/3c823396-913b-442a-bb97-3a3127fdf285
          Origins:
            -
              Id: S3Origin
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
              DomainName: { 'Fn::Join': [ '.', [ { 'Ref': 'S3BucketData' }, 's3-website-us-east-1.amazonaws.com' ] ] }

    # Create a DynamoDB table with a hash key based on user_id and a range key
    # Going to keep it a simple/stupid per-user key/value store, though it might be neat to add metadata
    # Will user Cognito user pools to scope permissions.
    DynamoTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
          -
            AttributeName: key
            AttributeType: S
        KeySchema:
          -
            AttributeName: user_id
            KeyType: HASH
          -
            AttributeName: key
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_USERDATA_TABLE}

    # Cognito User Pool / Identity Pool
    # =================
    # After I learn more I may want to dump Cognito and shift to solely developer provided
    # identities, but Cognito does provide some neat things like Oauth so who knows.
    #
    # This will create the user pool and the policies so users can get access to their
    # scoped resources like S3 for storage and DynamoDB for Key/Value data.
    # Eventually I'll also want to set up other permissions for things like MQTT or other
    # services.
    #
    # Alias Attributes
    # ----------------
    # I'm still not too sure about the right way to configure the attributes for a user
    # I'd like the preferred_username to be used to map the subdomain. There's probably a ton
    # of edge cases with updating or adding additional emails or changing the preferred_username
    # but I'll ignore them for now.
    #
    # PasswordPolicy
    # --------------
    # I've chosen the most lax password policy. People can choose their own security vs. accessibility
    # tradeoff. If someone wants to make an account to goof around and it has no valuable data, why
    # restrict them?
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.environment.USER_POOL_NAME}
        AliasAttributes:
          - email
          - preferred_username
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: preferred_username
          AttributeDataType: String
          Mutable: true
          Required: true

    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:service}
        UserPoolId:
          Ref: UserPool

    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${self:provider.environment.IDENTITY_POOL_NAME}
        AllowUnauthenticatedIdentities: true
        DeveloperProviderName: ${self:service}
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolClient
            ProviderName:
              "Fn::GetAtt":
                - UserPool
                - ProviderName

    UnauthenticatedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated

    AuthenticatedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated

    AuthenticatedPolicy:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyName: '${self:service}-authenticated'
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Action:
                - "s3:ListBucket"
              Effect: Allow
              Resource:
                - "arn:aws:s3:::${self:custom.bucketName}"
              Condition:
                StringLike:
                  "s3:prefix":
                    "Fn::Join": # Have to do this weird join because Serverless doesn't allow escaping substitution variables
                      - ""
                      - ["$", "{", "cognito-identity.amazonaws.com:sub", "}", "/*"]
            -
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:DeleteObject"
              Effect: Allow
              Resource:
                - "Fn::Join": # Have to do this weird join because Serverless doesn't allow escaping substitution variables
                  - ""
                  - ["arn:aws:s3:::${self:custom.bucketName}/", "$", "{", "cognito-identity.amazonaws.com:sub", "}", "/*"]
            -
              Action:
                - "dynamodb:DeleteItem"
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
                - "dynamodb:Query"
                - "dynamodb:UpdateItem"
              Effect: Allow
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:${self:provider.accountId}:table/${self:provider.environment.DYNAMODB_USERDATA_TABLE}"
              Condition:
                "ForAllValues:StringEquals":
                  "dynamodb:LeadingKeys":
                    - "Fn::Join": # Have to do this weird join because Serverless doesn't allow escaping substitution variables
                      - ""
                      - ["$", "{", "cognito-identity.amazonaws.com:sub", "}"]
        Roles:
          -
            Ref: AuthenticatedRole

    # Assigns the roles to the Identity Pool
    RoleAttachment:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
            "Fn::GetAtt":
              - AuthenticatedRole
              - Arn
          unauthenticated:
            "Fn::GetAtt":
              - UnauthenticatedRole
              - Arn

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

