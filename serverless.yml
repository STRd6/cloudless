# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: cron

plugins:
  - serverless-domain-manager
  - serverless-plugin-cloudfront-lambda-edge

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  profile: serverless
  environment:
    RAD: cool
    BUCKET: '${self:custom.bucketName}'
  region: us-east-1

  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "s3:*"
       Resource: "arn:aws:s3:::${self:custom.bucketName}"
    -  Effect: "Allow"
       Action:
         - "s3:*"
       Resource: "arn:aws:s3:::${self:custom.bucketName}/*"

custom:
  bucketName: '${self:service}-${self:provider.stage}-s3bucketdata'

  customDomain:
    domainName: serverless.whimsy.space
    basePath: ""
    certificateName: "*.serverless.whimsy.space"
    createRoute53Record: true
    endpointType: 'regional'

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  bucketEvent:
    handler: handler.bucketEvent
    events:
      - s3: data
  api:
    handler: handler.http
    events:
      - http:
          path: / # this matches the base path
          method: ANY
      - http:
          path: /{any+} # this matches any path, the token 'any' doesn't mean anything special
          method: ANY
  edge:
    handler: handler.edge
    lambdaAtEdge:
       distribution: SiteDistribution
       eventType: 'origin-request'
  cron:
    handler: handler.run  # This will require the handler.js file,
                          # and execute the exported run function
#    events:
#      - schedule: rate(1 minute)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here

resources:
  Resources:
    S3BucketData:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:custom.bucketName}'
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - Content-*
                - origin
              AllowedMethods:
                - GET
                - HEAD
                - POST
              AllowedOrigins:
                - '*'
              MaxAge: 86400
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
    BucketEventLambdaPermissionDataS3:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - BucketEventLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:custom.bucketName}"

    SiteDistribution:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Aliases:
            - "*.serverless.whimsy.space"
            - serverless.whimsy.space
          Comment: "*.serverless.whimsy.space"
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            DefaultTTL: '10'
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: false
              Headers:
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
                - Origin
                - Host
              Cookies:
                Forward: none
          DefaultRootObject: 'index.html'
          Enabled: true
          HttpVersion: 'http2'
          PriceClass: PriceClass_200
          ViewerCertificate:
            SslSupportMethod: sni-only
            AcmCertificateArn: >-
              arn:aws:acm:us-east-1:186123361267:certificate/3c823396-913b-442a-bb97-3a3127fdf285
          Origins:
            -
              Id: S3Origin
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
              DomainName: { 'Fn::Join': [ '.', [ { 'Ref': 'S3BucketData' }, 's3-website-us-east-1.amazonaws.com' ] ] }

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

